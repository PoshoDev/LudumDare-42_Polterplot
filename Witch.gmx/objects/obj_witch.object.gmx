<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_witch_black</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INITIALIZE
cpu = false;
scale = (global.rom_width/sprite_width)/5;

image_xscale = scale;
image_yscale = scale;

image_speed = 0;

target = 0;
target_y = 0;
spd = global.rom_width/250;
anim = 0;
frame = 1;
carrying = -1;
holding = -1;
mode = "none";

if (y &gt; global.rom_center_y)
    owner = 0;
else
    owner = 1;

cpu = global.cpu[owner];

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ACTIONS

if (global.start &amp;&amp; target != 0)
{
    // Retrieves a different Y for the seed bags and the caldrum.
        if (instance_exists(target))
        {
            if (target.y == global.rom_center_y)
            {
                if (owner == 0)
                    plus = +1;
                else
                    plus = -1;
                    
                target_y = target.y + (global.rom_offset * 1.5 * plus);
            }
            else
            {
                // Cancels if target is a seed and is lost.
                if (object_get_name(target.object_index)=="obj_seed" &amp;&amp; target.target!=0)
                {
                    target = 0;
                    target_y = 0;
                    speed = 0;
                }
                else
                    target_y = target.y
            }
        }
        else
        {
            target = 0;
            target_y = 0;
            speed = 0;
        }
    
    // Checks if finished.
    if (x&gt;target.x-spd &amp;&amp; x&lt;target.x+spd &amp;&amp; y&gt;target_y-spd &amp;&amp; y&lt;target_y+spd)
    {
        switch(object_get_name(target.object_index))
        {
            case "obj_soil":
                soil = instance_nearest(x, y, obj_soil);
            
                if (carrying != -1 &amp;&amp; soil.tomb == -1 &amp;&amp; soil.able)
                {
                    soil.tomb = instance_create(soil.x, soil.y, obj_tomb);
                    soil.tomb.image_index = carrying * 2;
                    soil.seed = carrying;
                    carrying = -1;
                    scr_play(snd_witch_plant, false);
                }
                else if (soil.tomb != -1 &amp;&amp; soil.tomb.stage!=0)
                {
                    if (carrying != -1)
                        holding.dropped = 1;
                        
                    ghost = instance_create(soil.x, soil.y, obj_ghost);
                    ghost.seed = soil.seed;
                    with soil.tomb instance_destroy();
                    soil.tomb = -1;
                }
                else if (!soil.able)
                {
                    if (carrying != -1)
                        holding.dropped = 1;
                        
                    mode = "fixing";
                    reloader = instance_create(x, y, obj_reloader_plot)
                    reloader.witch = self;
                }
            break;
            
            case "obj_seed":
                if (instance_exists(target))
                {
                    if (carrying != -1)
                        holding.dropped = 1;
                    
                    holding = target;
                    carrying = target.image_index;
                    reloader = instance_create(target.x, target.y, obj_seed_reloader);
                    for(i=0; i&lt;5; i++)
                        if (global.bag[i] == target)
                            reloader.slot = i;
                    target.target = self;
                    scr_play(snd_witch_carry, false);
                }
            break;
        }
     
        target = 0;
        target_y = 0;
        speed = 0;
    }
    else
    {
        // Moves towards target.
        move_towards_point(target.x, target_y, global.rom_width/250);
        
        if (anim == 0)
            anim = 1;   
    }
}
else
    speed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ANIMATION

switch(anim)
{
    case 0:
    break;

    case 1:
        image_xscale -= scale/20;
        image_yscale += scale/15;
        
        image_index = frame;
        
        if (image_yscale &gt;= scale*1.20)
        {
            anim++;
            
            if (frame == 1)
                frame++;
            else
                frame--;   
        }
    break;

    case 2:
        image_xscale += scale/20;
        image_yscale -= scale/15;
        
        image_index = 0;
        
        if (speed == 0 &amp;&amp; image_yscale &lt;= scale)
            anim = 0;
        else if (image_yscale &lt;= scale*0.80)
                anim--;
    break;
}

depth = -y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A.I.

// Find a target.
if (global.start &amp;&amp; global.cpu[owner] &amp;&amp; !target &amp;&amp; mode=="none")
{
    //while(1)
    switch(irandom_range(0, ai.SIZE-1))
    {
        case ai.plot:
            check = irandom_range(0, 7)*2
            
            if (owner == 1)
            {
                if (check==2 || check==6 || check==10 || check==14)
                    check--;
            }
            else
            {
                if (check==0 || check==4 || check==8 || check==12)
                    check+=3;
            }
            
            tomb = -1;
            if (instance_exists(global.plot[check].tomb))
                tomb = global.plot[check].tomb
                
            if ((carrying!=-1 &amp;&amp; global.plot[check].tomb==-1 &amp;&amp; global.plot[check].able)
            || (carrying==-1 &amp;&amp; tomb!=-1 &amp;&amp; tomb.stage&gt;0)
            || (carrying==-1 &amp;&amp; !global.plot[check].able)) //Check these conditions for the love of God
            {
                target = global.plot[check];
                exit;
            }
        break;
        
        case ai.seed:
            if (carrying == -1)
            {
                check = irandom_range(0, 4)
                if (instance_exists(global.bag[check]) &amp;&amp; global.bag[check].dropped==0)
                {
                    target = global.bag[check];
                    exit;
                }
            }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW

// Trajectory Line
if (target != 0 &amp;&amp; instance_exists(target))
{
    if (global.player[owner].color = 0)
        color_2 = c_purple;
    else
        color_2 = c_green;
        
    draw_line_width_colour(x, y, target.x, target_y, spd*6, color_2, color_2);
}
    
// Self &amp; Shadow
draw_sprite_ext(spr_shadow, global.player[owner].color, x, y, scale*0.75, scale*0.75, image_angle, image_blend, 0.5);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
